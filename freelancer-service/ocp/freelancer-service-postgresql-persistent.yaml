apiVersion: v1
kind: Template
labels:
  app: freelancer-service
metadata:
  name: freelancer-postgresql
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: freelancer-service
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: freelancer-service
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
              - /bin/sh
              - -i
              - -c
              - sleep 10 && PGPASSWORD=$POSTGRESQL_PASSWORD psql -h $FREELANCER_POSTGRESQL_SERVICE_HOST -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c "$POSTGRESQL_INIT"
            containerName: ${APPLICATION_NAME}
            env:
            - name: POSTGRESQL_INIT
              value: create table freelancer (id  bigserial not null, email varchar(255) not null, first_name varchar(255) not null, last_name varchar(255) not null, primary key (id));
                     create table freelancer_skill (id int8 not null, freelancer_id int8 not null, skill varchar(255) not null, primary key (id));
                     insert into freelancer (id, first_name, last_name, email) values (1, 'freelancer1_firstname', 'freelancer1_lastname', 'freelancer1@email.com');
                     insert into freelancer (id, first_name, last_name, email) values (2, 'freelancer2_firstname', 'freelancer2_lastname', 'freelancer2@email.com');
                     insert into freelancer (id, first_name, last_name, email) values (3, 'freelancer3_firstname', 'freelancer3_lastname', 'freelancer3@email.com');
                     insert into freelancer_skill (id, freelancer_id, skill) values (1, 1, 'Java');
                     insert into freelancer_skill (id, freelancer_id, skill) values (2, 1, 'Thorntail');
                     insert into freelancer_skill (id, freelancer_id, skill) values (3, 1, 'Vert.x');
                     insert into freelancer_skill (id, freelancer_id, skill) values (4, 1, 'Spring-Boot');
                     insert into freelancer_skill (id, freelancer_id, skill) values (5, 2, 'Java');
                     insert into freelancer_skill (id, freelancer_id, skill) values (6, 2, 'Thorntail');
                     insert into freelancer_skill (id, freelancer_id, skill) values (7, 3, 'Vert.x');
                     insert into freelancer_skill (id, freelancer_id, skill) values (8, 3, 'Spring-Boot');
          failurePolicy: ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: freelancer-service
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${FREELANCER_DB_USERNAME}
          - name: POSTGRESQL_PASSWORD
            value: ${FREELANCER_DB_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${FREELANCER_DB_NAME}
          image: postgresql
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 5432
            protocol: TCP
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: freelancer-postgresql-data
          livenessProbe:
            initialDelaySeconds: 30
            failureThreshold: 10
            periodSeconds: 10
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 10
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 256Mi
        terminationGracePeriodSeconds: 60
        volumes:
        - name: freelancer-postgresql-data
          persistentVolumeClaim:
            claimName: freelancer-postgresql-pv
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: freelancer-service
    name: freelancer-postgresql-pv
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
parameters:
- description: Application name
  name: APPLICATION_NAME
  required: true
  value: freelancer-postgresql
- description: Freelancer Service database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: FREELANCER_DB_USERNAME
  required: true
- description: Freelancer Service database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: FREELANCER_DB_PASSWORD
  required: true
- description: Freelancer Service database name
  name: FREELANCER_DB_NAME
  required: true
  value: freelancerdb